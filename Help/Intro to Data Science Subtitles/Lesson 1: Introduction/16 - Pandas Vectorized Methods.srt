0:00:01.660,0:00:05.530
Also allows you operate on your data frame in a vectorized and item by item way.

0:00:06.610,0:00:09.060
What does it mean to operate on data frame in a vectorized way?

0:00:10.060,0:00:12.480
Let's say we have the following data frame.

0:00:12.480,0:00:15.230
This data frame has 2 columns, 1 and 2.

0:00:16.560,0:00:19.400
And 4 rows, a, b, c, and d.

0:00:20.590,0:00:22.620
All of the values are integers.

0:00:22.620,0:00:24.440
We can call data frame that apply and

0:00:24.440,0:00:27.470
provide us the argument sum arbitrary function.

0:00:27.470,0:00:28.175
In this case,

0:00:28.175,0:00:33.430
numpy.mean to perform that function on the vector that is every single column.

0:00:33.430,0:00:36.400
So when we call df.apply numpy.mean.

0:00:36.400,0:00:38.870
What we get back is the mean of every single column in df.

0:00:38.870,0:00:41.450
This is itself a new data frame.

0:00:41.450,0:00:45.310
There are also some operations that simply cannot be vectorized in this way.

0:00:45.310,0:00:47.880
That is, take an numpy array as their input and

0:00:47.880,0:00:49.650
then return another array or value.

0:00:50.770,0:00:54.430
We can also, in this case, call map on particular columns.

0:00:54.430,0:00:56.400
Or apply map on entire data frames.

0:00:57.880,0:01:01.470
These methods will accept functions that take in a single value, and

0:01:01.470,0:01:03.120
return a single value.

0:01:03.120,0:01:08.060
For example let's say that we said df one.map lambda x x greater than or

0:01:08.060,0:01:08.980
equal to 1.

0:01:08.980,0:01:12.970
What this does is goes through every single value in the 1 column, and

0:01:12.970,0:01:16.510
evaluates whether or not that value is greater than or equal to 1.

0:01:16.510,0:01:23.869
If we were to call df.applymap lambda x x greater than or equal to 1.

0:01:23.869,0:01:28.470
The same function is evaluated over every single value in the data frame.

0:01:28.470,0:01:30.200
As opposed to just the 1 column.
