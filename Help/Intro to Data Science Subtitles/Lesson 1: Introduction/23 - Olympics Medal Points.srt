0:00:00.590,0:00:03.030
All right, why don't we walk through the solution.

0:00:03.030,0:00:05.920
Here, we're going to start with our olympic_medal_counts_df DataFrame,

0:00:05.920,0:00:08.150
as we have in the previous exercises.

0:00:08.150,0:00:12.160
First, we're going to create a new, smaller dataframe called metal counts,

0:00:12.160,0:00:16.480
which is the olympic_medal_count_df DataFrame, but only the gold, silver, and

0:00:16.480,0:00:17.125
bronze columns.

0:00:18.400,0:00:22.175
Then we're going to use the numpy.dot function to matrix multiply this

0:00:22.175,0:00:26.810
metal_counts_matrix with the 4, 2, 1 array which represents the number of

0:00:26.810,0:00:30.460
points that each country would score for a gold, silver, or bronze medal.

0:00:30.460,0:00:33.280
So what we're going to get here is an array,

0:00:33.280,0:00:37.190
where the value is 4 times the number of gold medals plus 2 times the number of

0:00:37.190,0:00:41.020
silver medals plus 1 times the number of bronze medals.

0:00:41.020,0:00:44.750
Down here, I'm going to define this Python dictionary called olympic_points,

0:00:44.750,0:00:46.430
where again I provide us the keys,

0:00:46.430,0:00:50.490
the column names, and as the values panda series, where I provide as

0:00:50.490,0:00:55.370
the argument first the list of country names and here, this array points,

0:00:55.370,0:00:58.040
which again has the total number of points that each country earned.

0:00:59.150,0:01:05.830
Finally, I'm just going to say olympic_points_df is DataFrame of olympic_points.

0:01:05.830,0:01:08.600
This is just the tip of the iceberg when it comes to pandas and

0:01:08.600,0:01:10.610
numpy's functionality.

0:01:10.610,0:01:13.830
If you're interested to read more about what these libraries can do,

0:01:13.830,0:01:16.950
I encourage you to check out the full documentation which are found in

0:01:16.950,0:01:18.910
the urls in the instructor comments below
