0:00:00.420,0:00:03.530
I'd like to discuss one more neat trick that Numpy will allow us to do

0:00:03.530,0:00:04.040
very easily.

0:00:05.540,0:00:08.470
Numpy has a numpy.dot function that will allow us to

0:00:08.470,0:00:10.890
easily take the dot product between two vectors.

0:00:12.600,0:00:16.045
Let's walk through what it means to take the dot products first.

0:00:16.045,0:00:20.104
Let's say I have an array called a, whose values are 1, 2, 3, 4, and 5.

0:00:21.110,0:00:24.900
And then I had an array called b, whose values were 2, 3, 4, 5, and 6.

0:00:26.050,0:00:29.140
These two vectors are indexed in the following way.

0:00:29.140,0:00:33.920
Let's say that the 0th entry of A is 1 and the 0th entry of B is two.

0:00:33.920,0:00:38.630
And the first entry of A is 2, and the first entry of b is 3, and so on.

0:00:39.860,0:00:43.090
The way that we take the dot product is we say we're going to multiply together

0:00:43.090,0:00:44.650
the 0th entry of the two arrays.

0:00:44.650,0:00:48.070
And then we're going to add that to the sum of the first entry of

0:00:48.070,0:00:48.570
the two arrays.

0:00:48.570,0:00:52.130
And then we're going to add that to the product of the second entry of

0:00:52.130,0:00:54.060
the arrays, and so on.

0:00:54.060,0:00:59.140
So in this case, we end up with 1 times 2 plus 2 times 3 plus 3 times 4

0:00:59.140,0:01:02.634
plus 4 times 5 plus 5 times 6, which is 70.

0:01:02.634,0:01:06.208
We could easily do this in Numpy using numpy.dot.

0:01:06.208,0:01:07.730
Just watch.

0:01:07.730,0:01:10.617
Here I define a and b just as we did a moment ago.

0:01:10.617,0:01:14.223
If we just say numpy.dot (a,b), I get 70.

0:01:15.310,0:01:19.950
I can also use the Numpy.dot function to multiply arrays into matrices.

0:01:21.190,0:01:24.970
If you're not familiar with how to multiply an array into a matrix,

0:01:24.970,0:01:28.350
you should follow the online resources found in the instructor notes.

0:01:28.350,0:01:33.351
But for now, just know that if we have this array 1, 2 in this matrix, 2, 3,

0:01:33.351,0:01:37.546
4, 5, 6, 7, we would essentially multiply them together and

0:01:37.546,0:01:42.080
get an array where the first entry is 1 times 2 plus 2 times 3.

0:01:42.080,0:01:46.020
The second entry is 1 times 4 plus 2 times 5.

0:01:46.020,0:01:49.650
And the third entry is 1 times 6 plus 2 times 7.

0:01:51.160,0:01:55.340
If we perform this multiplication down here, we would get a two-entry array

0:01:55.340,0:01:59.640
where the top entry is 2 times 8 plus 4 times 9 plus 6 times 10,

0:01:59.640,0:02:05.330
and the bottom entry is 3 times 8 plus 5 times 9 plus 7 times 10.

0:02:05.330,0:02:09.610
Since these multiplications don't commute, Numpy.dot is smart enough to

0:02:09.610,0:02:13.160
throw an error if you try to ask it to do something that doesn't make sense.

0:02:13.160,0:02:16.350
Let's say I wanted to perform this multiplication right here and

0:02:16.350,0:02:18.630
I called this guy a and this guy b.

0:02:18.630,0:02:23.790
I could simply call numpy.dot(a,b) and what I get back is 8, 14,

0:02:23.790,0:02:27.300
20, just as we would get if we performed this arithmetic here.
