0:00:00.470,0:00:04.340
Let's revisit the CSV baseball data that we downloaded earlier.

0:00:04.340,0:00:07.450
CSV is a very popular way to store data, likely because

0:00:07.450,0:00:09.930
it's easy to read and comprehend for both humans and

0:00:09.930,0:00:14.470
computers. It also probably doesn't hurt that Microsoft Excel can export

0:00:14.470,0:00:17.330
data as a CSV. As you can see, every element

0:00:17.330,0:00:20.080
of each row is separated by a comma. If we wanted

0:00:20.080,0:00:22.070
to load this data into Pandas, we can do this

0:00:22.070,0:00:26.050
in one line. It's super easy. We simply import pandas, and

0:00:26.050,0:00:32.110
then write baseball_data equals pandas.read_csv Master.csv. This will

0:00:32.110,0:00:34.800
load the comma separated data into what Pandas calls

0:00:34.800,0:00:36.930
a data frame, where we can retrieve each

0:00:36.930,0:00:41.300
column like this, print baseball_data name first. We can

0:00:41.300,0:00:43.270
also create new columns on the data frame

0:00:43.270,0:00:46.668
by manipulating the columns in a vectorized way. For

0:00:46.668,0:00:48.460
example, if I wanted a new column that

0:00:48.460,0:00:50.756
was the sum of each player's height and weight,

0:00:50.756,0:00:54.284
called baseball_data height plus weight, I could write baseball_data

0:00:54.284,0:00:58.310
height plus weight equals baseball_data height, plus baseball_data weight.
