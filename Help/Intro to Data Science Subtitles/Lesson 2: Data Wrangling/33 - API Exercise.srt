1
00:00:00,490 --> 00:00:04,530
Alright, let's work through the solution. First we import

2
00:00:04,530 --> 00:00:08,530
the json and request libraries. Then we provide the URL

3
00:00:08,530 --> 00:00:11,310
that we're going to be making our API call to.

4
00:00:11,310 --> 00:00:14,510
Then we make our API call using the request library,

5
00:00:14,510 --> 00:00:17,350
and load the results into a dictionary. Finally, we

6
00:00:17,350 --> 00:00:20,280
print out the name of the number one top artist.

7
00:00:20,280 --> 00:00:22,260
In the data dictionary, we will look at the top

8
00:00:22,260 --> 00:00:25,480
artist's key. Then we look at the artist key there.

9
00:00:25,480 --> 00:00:27,750
We look at the first entry. And we look

10
00:00:27,750 --> 00:00:31,170
at the name parameter. As you can see, the URL

11
00:00:31,170 --> 00:00:33,600
is the biggest difference between this code and the sample

12
00:00:33,600 --> 00:00:37,020
code in the previous video. Mainly I've just changed the

13
00:00:37,020 --> 00:00:39,860
parameters and the URL variable. To make sure that I'm

14
00:00:39,860 --> 00:00:44,720
getting the top artists, I am calling the geo.gettopartists method.

15
00:00:44,720 --> 00:00:47,150
I'm also passing the country parameters in by setting the

16
00:00:47,150 --> 00:00:50,530
parameter country equal to Spain. And once I have retrieved

17
00:00:50,530 --> 00:00:51,960
the data, I'm loading it into a

18
00:00:51,960 --> 00:00:56,970
json file in this line. Data equals json.loads(data).

19
00:00:56,970 --> 00:00:58,250
This lets me find the top performing

20
00:00:58,250 --> 00:01:00,670
artist quickly and easily by accessing it almost

21
00:01:00,670 --> 00:01:04,410
like a python dictionary. You could also load the data as json and try to

22
00:01:04,410 --> 00:01:05,940
just parse it with the regex, but

23
00:01:05,940 --> 00:01:08,100
I personally think that would be really painful.
