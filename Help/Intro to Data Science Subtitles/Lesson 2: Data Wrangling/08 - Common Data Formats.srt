1
00:00:00,520 --> 00:00:03,170
Three of the most common data formats are CSV,

2
00:00:03,170 --> 00:00:06,930
XML, and JSON. I want to quickly discuss what one

3
00:00:06,930 --> 00:00:09,380
record in the Lahman Baseball Database would look like in

4
00:00:09,380 --> 00:00:12,860
each of these different formats. It just so happens that

5
00:00:12,860 --> 00:00:15,130
the first row in this data set corresponds to a

6
00:00:15,130 --> 00:00:19,260
pretty famous baseball player. Hank Aaron. Let's first discuss what

7
00:00:19,260 --> 00:00:21,950
this data looks like in the format we originally downloaded

8
00:00:21,950 --> 00:00:25,720
it in, CSV. In the CSV format we usually have

9
00:00:25,720 --> 00:00:28,870
a series of rows. With each row corresponding to an

10
00:00:28,870 --> 00:00:31,880
entry. There is a header row at the top of

11
00:00:31,880 --> 00:00:35,210
our file. Where our comma separated values do not correspond

12
00:00:35,210 --> 00:00:38,400
to an entry but instead tell us what each entry means

13
00:00:38,400 --> 00:00:40,790
for the rest of the document. In the case of

14
00:00:40,790 --> 00:00:43,700
this baseball document, our first row tells us that every

15
00:00:43,700 --> 00:00:47,040
row will have some identifiers, the Lahman ID. The player

16
00:00:47,040 --> 00:00:50,830
ID, the manager ID, et cetera. Then we'll see birth year,

17
00:00:50,830 --> 00:00:53,920
birth month, birth day and then a bunch of other

18
00:00:53,920 --> 00:00:56,630
statistics. If we go and look at the entry for

19
00:00:56,630 --> 00:00:59,010
Hank Aaron. We see all of these values, 1 for

20
00:00:59,010 --> 00:01:03,990
Lahman ID, aaronha01 for player ID, et cetera, separated by

21
00:01:03,990 --> 00:01:07,347
commas. Note that if a particular player doesn't have a

22
00:01:07,347 --> 00:01:10,140
value for one field, for example Hank Aaron does not

23
00:01:10,140 --> 00:01:13,000
have a manager ID, we simply see two commas in

24
00:01:13,000 --> 00:01:15,950
a row. In the case of an XML document, we end

25
00:01:15,950 --> 00:01:18,190
up with something that pretty closely resembles HTML. We

26
00:01:18,190 --> 00:01:22,150
can have a document element, which is opened. It can

27
00:01:22,150 --> 00:01:24,255
then have a series of tables, which are also

28
00:01:24,255 --> 00:01:27,970
opened, as we see here. The table has a number

29
00:01:27,970 --> 00:01:31,490
of children, which correspond to the values that we

30
00:01:31,490 --> 00:01:35,250
just discussed in the CSV 1 for Lahman ID, aaronha01

31
00:01:35,250 --> 00:01:38,640
for player Id, etc. Note that when we're missing

32
00:01:38,640 --> 00:01:41,600
a value in XML, things are treated a bit differently.

33
00:01:41,600 --> 00:01:44,510
For example, since Hank Aaron was not a manager, we

34
00:01:44,510 --> 00:01:46,860
just open the manager ID field and then put a

35
00:01:46,860 --> 00:01:50,880
slash at the end. Finally, for a JSON document, we

36
00:01:50,880 --> 00:01:53,980
have a number of JSON objects indicated by these curly

37
00:01:53,980 --> 00:01:57,070
braces. A JSON object looks a lot like a Python

38
00:01:57,070 --> 00:02:01,148
dictionary. We have keys. Which correspond to what we would

39
00:02:01,148 --> 00:02:03,458
see in the header row in a CSV file followed

40
00:02:03,458 --> 00:02:07,030
by values. Note that in the case of a missing value,

41
00:02:07,030 --> 00:02:10,930
we simply open and close the quotation marks. Oftentimes,

42
00:02:10,930 --> 00:02:13,730
the benefit of XML or JSON is that they support

43
00:02:13,730 --> 00:02:16,530
nested structures in a way that CSV documents cannot.

44
00:02:17,540 --> 00:02:19,560
I don't want to go into this in great detail,

45
00:02:19,560 --> 00:02:21,630
but you can imagine that the value corresponding to

46
00:02:21,630 --> 00:02:26,000
a particular JSON key, say braves, could itself be another

47
00:02:26,000 --> 00:02:29,840
JSON object. Here's what that might look like. One final

48
00:02:29,840 --> 00:02:32,347
note, is to remember that when we talk about different

49
00:02:32,347 --> 00:02:34,730
formats that data can come in, it's not a

50
00:02:34,730 --> 00:02:38,036
matter of the file extension being .CSV or being

51
00:02:38,036 --> 00:02:40,747
.JSON. A file format really has to do with

52
00:02:40,747 --> 00:02:44,010
how the data is organized inside of a file.

53
00:02:44,010 --> 00:02:46,350
So we could easily have data that is formatted

54
00:02:46,350 --> 00:02:49,470
in JSON or CSV, but that comes in a

55
00:02:49,470 --> 00:02:53,880
file whose extension is .txt. Since the online MTA

56
00:02:53,880 --> 00:02:57,510
subway data comes in CSV format, in the weather underground

57
00:02:57,510 --> 00:03:01,019
API responds to requests with a JSON object. We'll discuss

58
00:03:01,019 --> 00:03:03,300
how to load and process files in these two formats.

59
00:03:04,370 --> 00:03:08,290
While we won't explicitly discuss loading and processing XML files,

60
00:03:08,290 --> 00:03:11,300
it isn't that different than the material will cover with regards

61
00:03:11,300 --> 00:03:14,080
to JSON and CSV. If you'd like to learn more

62
00:03:14,080 --> 00:03:17,350
about dealing with XML data in particular. I recommend you take

63
00:03:17,350 --> 00:03:19,730
the data wrangling class with Mongo DB taught here at

64
00:03:19,730 --> 00:03:23,470
Udacity. For now, let's discuss how to work with CSV files.
