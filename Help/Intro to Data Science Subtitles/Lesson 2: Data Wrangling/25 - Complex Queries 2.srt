1
00:00:00,570 --> 00:00:01,760
The last thing that I want to quickly

2
00:00:01,760 --> 00:00:04,900
discuss ,are some functions that usually exist in query

3
00:00:04,900 --> 00:00:07,732
languages like Sequel. Such as ,group bys and

4
00:00:07,732 --> 00:00:11,250
aggregate functions. So let's say that I wanted to

5
00:00:11,250 --> 00:00:14,500
create some transformed version of my data. For

6
00:00:14,500 --> 00:00:17,590
example, what are the total number of enrollments per

7
00:00:17,590 --> 00:00:21,710
district? . I could write something like this. Select

8
00:00:21,710 --> 00:00:25,970
district,. Sum (aadhaar - generated) from aadhaar - data,

9
00:00:25,970 --> 00:00:29,200
group by district. Let's talk about this

10
00:00:29,200 --> 00:00:32,119
a little bit more. What's happening exactly?

11
00:00:32,119 --> 00:00:38,010
. Sum is what we call an aggregate function. An aggregate function takes some

12
00:00:38,010 --> 00:00:40,960
set of values, usually numbers and performs

13
00:00:40,960 --> 00:00:44,040
a mathematical operation on them. We've used

14
00:00:44,040 --> 00:00:47,420
sum ,but other aggregate functions include count.

15
00:00:47,420 --> 00:00:51,290
Min, mean, max. You get the idea.

16
00:00:51,290 --> 00:00:53,830
Operations that one could perform on a collection

17
00:00:53,830 --> 00:00:58,360
of numbers. But wait. Every single row is

18
00:00:58,360 --> 00:01:01,060
only one number. So how do we get

19
00:01:01,060 --> 00:01:04,420
to collections of numbers? What we basically say here

20
00:01:04,420 --> 00:01:07,480
is take each distinct district. And then for

21
00:01:07,480 --> 00:01:10,190
all of the different values of aadhaar_generated corresponding

22
00:01:10,190 --> 00:01:12,950
to a row ,for that district. Sum them

23
00:01:12,950 --> 00:01:16,960
up. So, we start with our aadhaar data table.

24
00:01:16,960 --> 00:01:19,920
Take each district ,and sum up the count aadhaar

25
00:01:19,920 --> 00:01:23,110
generated. Now in order for our results to make

26
00:01:23,110 --> 00:01:25,570
sense, we are only going to want one row

27
00:01:25,570 --> 00:01:28,970
in our output for each district. So we throw in

28
00:01:28,970 --> 00:01:32,310
this group by clause on the end, which essentially

29
00:01:32,310 --> 00:01:35,320
says. Let's only have one row per district in

30
00:01:35,320 --> 00:01:38,340
our results. There can be numerous clauses in a

31
00:01:38,340 --> 00:01:42,910
group buy. So we could also say this, select district,

32
00:01:42,910 --> 00:01:47,410
subdistrict, sum aadhaar generated, from aadhaar data, group

33
00:01:47,410 --> 00:01:51,330
by district, subdistrict. Note that whatever columns we

34
00:01:51,330 --> 00:01:53,820
select, that we don't aggregate, we need to

35
00:01:53,820 --> 00:01:57,380
group by. In this case, district and sub-district. We

36
00:01:57,380 --> 00:01:59,840
could also put a where clause here, so

37
00:01:59,840 --> 00:02:02,160
in order to sum up aadhaar generated for people

38
00:02:02,160 --> 00:02:07,880
over 60 in each district, I can just add a where clause in after the table name,

39
00:02:07,880 --> 00:02:12,850
as we discussed earlier. If we were to run this query. Giving us select

40
00:02:12,850 --> 00:02:17,870
district, sub-district, sum aadhaar generated, from aadhaar data,

41
00:02:17,870 --> 00:02:23,000
where age greater than 60, group by district, sub-district. If we

42
00:02:23,000 --> 00:02:24,900
were to run this query, we would have

43
00:02:24,900 --> 00:02:27,285
a row for every combination of district and

44
00:02:27,285 --> 00:02:29,910
subdistrict. And we would also have for each

45
00:02:29,910 --> 00:02:33,030
row, account of how many aadhaar were generated ,for

46
00:02:33,030 --> 00:02:34,925
people over the age of 60.
