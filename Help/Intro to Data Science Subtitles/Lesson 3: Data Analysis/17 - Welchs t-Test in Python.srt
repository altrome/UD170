1
00:00:00,390 --> 00:00:02,620
All right, so we've established that we can do

2
00:00:02,620 --> 00:00:05,870
this t-test and compute these t-values and nu values

3
00:00:05,870 --> 00:00:09,490
and, and p-values in the abstract mathematical sense, but

4
00:00:09,490 --> 00:00:11,380
you might be wondering how do I do this

5
00:00:11,380 --> 00:00:13,280
in python? Is there a simple way to do

6
00:00:13,280 --> 00:00:16,500
this? Well, the answer is yes, this can be

7
00:00:16,500 --> 00:00:19,655
done in the following way. First you simply import

8
00:00:19,655 --> 00:00:25,675
scipy.stats. And then you call scipy.stats.ttest_ind and then supply

9
00:00:25,675 --> 00:00:28,735
as arguments two lists, which are your two

10
00:00:28,735 --> 00:00:32,049
sets of data, and then an optional argument,

11
00:00:32,049 --> 00:00:35,220
equal_var=false. This indicates whether or not we think

12
00:00:35,220 --> 00:00:37,422
the variance of our two samples is equal. This

13
00:00:37,422 --> 00:00:41,980
equal_var=false argument makes this particular call of the

14
00:00:41,980 --> 00:00:45,860
t-test equal to Welch's t-test. This function will

15
00:00:45,860 --> 00:00:48,005
return a tuple. The first value is the

16
00:00:48,005 --> 00:00:50,691
t-value for your data. And the second value is

17
00:00:50,691 --> 00:00:54,478
the corresponding p-value for a two-tailed test. The values

18
00:00:54,478 --> 00:00:58,322
returned by scipy.stats.ttest_ind assumes that you are performing a

19
00:00:58,322 --> 00:01:01,546
two-sided t-test where we're only testing for whether the

20
00:01:01,546 --> 00:01:04,519
means of our two samples are different. Say we

21
00:01:04,519 --> 00:01:07,270
wanted to do a one-sided t-test, that is, we're

22
00:01:07,270 --> 00:01:10,510
interested in testing whether one mean in particular is

23
00:01:10,510 --> 00:01:13,330
greater than or less than the other. How might

24
00:01:13,330 --> 00:01:16,420
we do this given the output that this function produces?

25
00:01:16,420 --> 00:01:20,220
Write your answer in the text box below. Here's a hint. We can still use

26
00:01:20,220 --> 00:01:22,090
the t value and p value that this

27
00:01:22,090 --> 00:01:24,640
function returns. Don't worry. This won't be graded.
