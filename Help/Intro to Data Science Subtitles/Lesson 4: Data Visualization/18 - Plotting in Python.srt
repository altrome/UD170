1
00:00:00,240 --> 00:00:01,800
Now, we know a bunch about how you may

2
00:00:01,800 --> 00:00:05,240
encode information into your visualization and how to make an

3
00:00:05,240 --> 00:00:08,640
effective visualization, but we still haven't yet discussed how you

4
00:00:08,640 --> 00:00:11,520
can make graphics like this, short of drawing them with

5
00:00:11,520 --> 00:00:14,630
pen and paper. There are a number of packages

6
00:00:14,630 --> 00:00:17,975
for plotting in Python. One of the most popular is

7
00:00:17,975 --> 00:00:21,980
Matplotlib. For this course, however, I'd like to go over

8
00:00:21,980 --> 00:00:25,628
plotting using a Python library called ggplot, which very closely

9
00:00:25,628 --> 00:00:28,650
recreates the syntax used in R's ggplot2 library.

10
00:00:28,650 --> 00:00:32,238
If Matplotlib is so widely used, why should we

11
00:00:32,238 --> 00:00:35,390
use ggplot? Well, I'd like to use this package

12
00:00:35,390 --> 00:00:38,570
for a few reasons. First, what it produces is

13
00:00:38,570 --> 00:00:42,430
a bit more aesthetically pleasing than Matplotlib. Second, it's

14
00:00:42,430 --> 00:00:44,660
an implementation of a pretty neat concept called the

15
00:00:44,660 --> 00:00:47,900
grammar of graphics, which basically claims that there's a

16
00:00:47,900 --> 00:00:52,240
grammar involved in composing graphical components of statistical graphics.

17
00:00:52,240 --> 00:00:54,460
The gg in ggplot actually comes from

18
00:00:54,460 --> 00:00:58,230
grammar of graphics. It also plays nicely with

19
00:00:58,230 --> 00:00:59,840
the pandas DataFrames we've been using in

20
00:00:59,840 --> 00:01:03,430
this course. To quickly summarize the ideas behind

21
00:01:03,430 --> 00:01:06,270
the grammar of graphics, plots convey information

22
00:01:06,270 --> 00:01:11,100
through their aesthetics such as x-position or y-position.

23
00:01:11,100 --> 00:01:12,640
The elements in a given plot are

24
00:01:12,640 --> 00:01:15,980
geometric shapes, such as points, lines, or bars.

25
00:01:17,050 --> 00:01:19,020
Some of these shapes can have aesthetics of

26
00:01:19,020 --> 00:01:21,500
their own, such as their size or their

27
00:01:21,500 --> 00:01:24,550
color. You can think of creating plots in

28
00:01:24,550 --> 00:01:27,600
ggplot through the grammar of graphics as adding layers

29
00:01:27,600 --> 00:01:30,860
to our plot. The first step in creating

30
00:01:30,860 --> 00:01:33,130
a graphic is always to create our plot, which

31
00:01:33,130 --> 00:01:36,132
is essentially going to be our canvas. This

32
00:01:36,132 --> 00:01:41,480
can be done by calling ggplot data aes(xvar, yvar).

33
00:01:42,650 --> 00:01:47,370
Data here is going to be a pandas DataFrame, and xvar and yvar are going to be

34
00:01:47,370 --> 00:01:50,480
columns in that data frame. So what we're doing

35
00:01:50,480 --> 00:01:53,730
here is saying let's make a ggplot. The data

36
00:01:53,730 --> 00:01:56,130
source is going to be our data frame,

37
00:01:56,130 --> 00:01:58,368
and the quantities that we're interested in plotting are

38
00:01:58,368 --> 00:02:03,730
xvar and yvar. This might be district and number

39
00:02:03,730 --> 00:02:07,930
of Aadhaar enrollments or position and number of players,

40
00:02:07,930 --> 00:02:10,997
something like that. So what we've done here is

41
00:02:10,997 --> 00:02:13,940
we've made our ggplot. We've said that the data source

42
00:02:13,940 --> 00:02:17,310
that it will use is pandas DataFrame, and that the

43
00:02:17,310 --> 00:02:20,670
variables that we'll look at are xvar and yvar. This

44
00:02:20,670 --> 00:02:23,670
might be district and number of Aadhaar enrolled if were

45
00:02:23,670 --> 00:02:27,200
using our Aadhaar data or team and total number of

46
00:02:27,200 --> 00:02:30,030
players if we were using our baseball data, something like

47
00:02:30,030 --> 00:02:32,930
that. Okay, so, so far that we've said that we'll

48
00:02:32,930 --> 00:02:34,615
have a plot which is mapping xvar to the

49
00:02:34,615 --> 00:02:38,550
x-axis, yvar to the y-axis, but we haven't said yet

50
00:02:38,550 --> 00:02:41,170
what type of geometric object is going to represent

51
00:02:41,170 --> 00:02:44,720
this data. So if we add plus geom point to

52
00:02:44,720 --> 00:02:48,340
this statement, we'll create a scatter plot. If we

53
00:02:48,340 --> 00:02:51,410
also add plus geom line to the graphic, we'll connect

54
00:02:51,410 --> 00:02:54,940
all these points to each other with lines. Now, say

55
00:02:54,940 --> 00:02:58,280
that we wanted these points to have a particular color.

56
00:02:58,280 --> 00:03:01,850
We can pass color equals coral into geom point,

57
00:03:01,850 --> 00:03:04,420
and also pass color equals coral into geom line.

58
00:03:04,420 --> 00:03:06,990
And after we do that, both the points and

59
00:03:06,990 --> 00:03:10,050
the lines will have the color coral. This is the

60
00:03:10,050 --> 00:03:14,020
second step of making a plot in ggplot, that

61
00:03:14,020 --> 00:03:17,010
is choosing which type geometric objects will represent the data.

62
00:03:18,140 --> 00:03:19,970
The final step here is going to be adding

63
00:03:19,970 --> 00:03:23,230
some labels so that our plot will have some context,

64
00:03:23,230 --> 00:03:28,290
like a title or an x-label or a y-label. This can be done much in the same way

65
00:03:28,290 --> 00:03:29,990
that we added the points and lines to our

66
00:03:29,990 --> 00:03:33,960
plot. We can add a ggtitle to title our

67
00:03:33,960 --> 00:03:38,690
plot. An xlab, which will be x-label, to provide

68
00:03:38,690 --> 00:03:41,480
an x-label. And a ylab to do the same

69
00:03:41,480 --> 00:03:44,170
with the y-axis. Now all I have to do

70
00:03:44,170 --> 00:03:48,420
is precede this entire command by Print. And I'll produce

71
00:03:48,420 --> 00:03:51,430
a plot in Python. Why don't you try implementing

72
00:03:51,430 --> 00:03:53,680
these ideas to create a graphic of your own?
